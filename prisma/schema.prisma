generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  userType     UserType
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accounts     Account[]
  sessions     Session[]
  admin        Admin?
  manualScores ManualScore[]
  student      Student?
  teacher      Teacher?
  blogPosts    BlogPost[]
  subjectSelections StudentSubjectSelection[]
  reviewedAppeals Appeal[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model VerifiedEmail {
  id         String   @id @default(cuid())
  email      String   @unique
  verifiedAt DateTime @default(now())
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@map("verified_emails")
}

model Student {
  id                          String                 @id @default(cuid())
  userId                      String                 @unique
  name                        String
  lastname                    String
  grade                       Int
  school                      String
  phone                       String                 @unique
  code                        String                 @unique @db.VarChar(6)
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt
  manualScores                ManualScore[]
  answers                     StudentAnswer[]
  olympiadEventParticipations StudentOlympiadEvent[]
  participations              StudentOlympiad[]
  testResults                 TestResult[]
  appeals                     Appeal[]
  classMemberships            ClassStudent[]
  classTestResults            ClassTestResult[]
  recommendationResponses     RecommendationResponse[]
  user                        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Teacher {
  id                      String            @id @default(cuid())
  userId                  String            @unique
  name                    String
  lastname                String
  subject                 String
  school                  String
  phone                   String            @unique
  isVerified              Boolean           @default(false)
  canCreateQuestions      Boolean           @default(false)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  canReviewAnswers        Boolean           @default(false)
  createdOlympiads        Olympiad[]        @relation("CreatedOlympiads")
  createdQuestionPackages QuestionPackage[] @relation("TeacherQuestionPackages")
  questionSets            QuestionSet[]
  createdQuestions        Question[]        @relation("CreatedByTeacher")
  classes                 Class[]
  classTests              ClassTest[]
  testQuestions           TestQuestion[]
  testQuestionGroups      TestQuestionGroup[]
  recommendations         Recommendation[]
  user                    User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("teachers")
}

model Admin {
  id                      String            @id @default(cuid())
  userId                  String            @unique
  name                    String
  lastname                String
  role                    AdminRole         @default(SUPER_ADMIN)
  permissions             String[]
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  user                    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdOlympiadEvents   OlympiadEvent[]   @relation("CreatedOlympiadEvents")
  managedOlympiads        Olympiad[]        @relation("ManagedOlympiads")
  createdQuestionPackages QuestionPackage[] @relation("AdminQuestionPackages")
  recommendationResponses RecommendationAdminResponse[]
  createdCalendarEvents   CalendarEvent[]   @relation("CreatedCalendarEvents")

  @@map("admins")
}

model Subject {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  chapters     Chapter[]
  olympiads    Olympiad[]
  questionSets QuestionSet[]
  questions    Question[]
  studentSelections StudentSubjectSelection[]
  testResults  TestResult[]
  classTests   ClassTest[]
  testQuestions TestQuestion[]
  testQuestionGroups TestQuestionGroup[]
  calendarEvents CalendarEvent[]

  @@map("subjects")
}

model Chapter {
  id          String      @id @default(cuid())
  name        String
  description String?
  order       Int
  subjectId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  subject     Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  paragraphs  Paragraph[]
  questions   Question[]

  @@map("chapters")
}

model Paragraph {
  id        String     @id @default(cuid())
  name      String
  content   String?
  order     Int
  chapterId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  chapter   Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  questions Question[]

  @@map("paragraphs")
}

model QuestionSet {
  id          String                @id @default(cuid())
  name        String
  description String?
  teacherId   String
  subjectId   String
  grade       Int
  isPublic    Boolean               @default(false)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  questions   QuestionSetQuestion[]
  subject     Subject               @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher     Teacher               @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("question_sets")
}

model Question {
  id                String                    @id @default(cuid())
  text              String
  type              QuestionType
  options           String[]
  correctAnswer     String?
  answerTemplate    String?                   // Template for open-ended questions (visible only to teachers/admins)
  points            Int                       @default(1)
  subjectId         String
  chapterId         String?
  paragraphId       String?
  grade             Int
  createdBy         String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  image             String[]
  round             Int
  chapterName       String?
  content           String?
  isAutoScored      Boolean                   @default(true)
  isPublic          Boolean                   @default(false)  // For public test questions
  matchingPairs     Json?
  leftSide          Json?
  rightSide         Json?
  maxPoints         Int?
  paragraphName     String?
  rubric            String?
  imageOptions      String[]
  createdByType     UserType?
  isReported        Boolean                   @default(false)
  reportReason      String?
  reportedAt        DateTime?
  reportedBy        String?
  status            QuestionStatus            @default(ACTIVE)
  manualScores      ManualScore[]
  olympiadQuestions OlympiadQuestion[]
  questionPackages  QuestionPackageQuestion[]
  questionSets      QuestionSetQuestion[]
  chapter           Chapter?                  @relation(fields: [chapterId], references: [id])
  createdByTeacher  Teacher?                  @relation("CreatedByTeacher", fields: [createdBy], references: [id])
  paragraph         Paragraph?                @relation(fields: [paragraphId], references: [id])
  subject           Subject                   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  answers           StudentAnswer[]

  @@map("questions")
}

model QuestionSetQuestion {
  id            String      @id @default(cuid())
  questionSetId String
  questionId    String
  order         Int
  createdAt     DateTime    @default(now())
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionSet   QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)

  @@unique([questionSetId, questionId])
  @@map("question_set_questions")
}

model QuestionPackage {
  id               String                    @id @default(cuid())
  name             String
  description      String?
  createdByAdminId String?
  createdByTeacherId String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  questions        QuestionPackageQuestion[]
  createdByAdmin   Admin?                    @relation("AdminQuestionPackages", fields: [createdByAdminId], references: [id], onDelete: Cascade)
  createdByTeacher Teacher?                  @relation("TeacherQuestionPackages", fields: [createdByTeacherId], references: [id], onDelete: Cascade)
  olympiadEvents   OlympiadEvent[]           @relation("OlympiadEventToQuestionPackage")

  @@map("question_packages")
}

model QuestionPackageQuestion {
  id                String          @id @default(cuid())
  questionPackageId String
  questionId        String
  order             Int
  createdAt         DateTime        @default(now())
  question          Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionPackage   QuestionPackage @relation(fields: [questionPackageId], references: [id], onDelete: Cascade)

  @@unique([questionPackageId, questionId])
  @@map("question_package_questions")
}

model Olympiad {
  id                 String             @id @default(cuid())
  name               String
  description        String?
  subjectId          String
  createdBy          String?
  managedBy          String?
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  grade              Int
  maxParticipants    Int?
  showDetailedReview Boolean            @default(false)
  manualScores       ManualScore[]
  questions          OlympiadQuestion[]
  createdByTeacher   Teacher?           @relation("CreatedOlympiads", fields: [createdBy], references: [id])
  managedByAdmin     Admin?             @relation("ManagedOlympiads", fields: [managedBy], references: [id])
  subject            Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  rounds             Round[]
  participations     StudentOlympiad[]
  curriculumId       String?
  curriculum         Curriculum?        @relation(fields: [curriculumId], references: [id])
  @@unique([subjectId, grade, name])
  @@map("olympiads")
}

model Curriculum {
  id          String      @id @default(cuid())
  title       String
  content     String?     

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  olympiads       Olympiad[]
  olympiadEvents  OlympiadEvent[]
  calendarEvents  CalendarEvent[]
}

model OlympiadEvent {
  id                     String                 @id @default(cuid())
  name                   String
  description            String?
  startDate              DateTime
  endDate                DateTime
  registrationStartDate  DateTime               @default(now())
  registrationDeadline   DateTime
  maxParticipants        Int?               @default(999999)
  isActive               Boolean                @default(true)
  showDetailedReview     Boolean                @default(false)
  rounds                 Int                    @default(3)
  duration               Int?                   // Duration in minutes
  subjects               String[]
  grades                 Int[]
  createdBy              String
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  minimumPointsThreshold Int?
  questionTypes          QuestionType[]
  questionTypeQuantities Json?
  curriculumId           String?
  curriculum             Curriculum?            @relation(fields: [curriculumId], references: [id])
  createdByUser          Admin                  @relation("CreatedOlympiadEvents", fields: [createdBy], references: [id], onDelete: Cascade)
  participations         StudentOlympiadEvent[]
  packages               QuestionPackage[]      @relation("OlympiadEventToQuestionPackage")

  @@map("olympiad_events")
}

model Round {
  id           String   @id @default(cuid())
  name         String
  order        Int
  startTime    DateTime
  endTime      DateTime
  duration     Int
  olympiadId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  maxQuestions Int
  olympiad     Olympiad @relation(fields: [olympiadId], references: [id], onDelete: Cascade)

  @@unique([olympiadId, order])
  @@map("rounds")
}

model OlympiadQuestion {
  id          String   @id @default(cuid())
  olympiadId  String
  questionId  String
  order       Int
  createdAt   DateTime @default(now())
  roundNumber Int
  olympiad    Olympiad @relation(fields: [olympiadId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([olympiadId, questionId])
  @@map("olympiad_questions")
}

model StudentOlympiad {
  id           String              @id @default(cuid())
  studentId    String
  olympiadId   String
  startTime    DateTime?
  endTime      DateTime?
  status       ParticipationStatus @default(REGISTERED)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  currentRound Int                 @default(1)
  round1Score  Int?
  round2Score  Int?
  round3Score  Int?
  totalScore   Int?
  olympiad     Olympiad            @relation(fields: [olympiadId], references: [id], onDelete: Cascade)
  student      Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, olympiadId])
  @@map("student_olympiads")
}

model StudentOlympiadEvent {
  id              String              @id @default(cuid())
  studentId       String
  olympiadEventId String
  startTime       DateTime?
  endTime         DateTime?
  currentRound    Int                 @default(1)
  round1Score     Int?
  round2Score     Int?
  round3Score     Int?
  totalScore      Int?
  status          ParticipationStatus @default(REGISTERED)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  olympiadEvent   OlympiadEvent       @relation(fields: [olympiadEventId], references: [id], onDelete: Cascade)
  student         Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  appeals         Appeal[]

  @@unique([studentId, olympiadEventId])
  @@map("student_olympiad_events")
}

model StudentAnswer {
  id          String   @id @default(cuid())
  studentId   String
  questionId  String
  answer      String
  isCorrect   Boolean?
  points      Int?
  answeredAt  DateTime @default(now())
  olympiadId  String?
  roundNumber Int?
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, questionId, olympiadId])
  @@map("student_answers")
}

model ManualScore {
  id          String   @id @default(cuid())
  studentId   String
  questionId  String
  olympiadId  String
  roundNumber Int
  scoredBy    String
  score       Float
  maxScore    Float
  feedback    String?
  scoredAt    DateTime @default(now())
  olympiad    Olympiad @relation(fields: [olympiadId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  scorer      User     @relation(fields: [scoredBy], references: [id], onDelete: Cascade)
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, questionId, olympiadId, roundNumber])
  @@map("manual_scores")
}

enum UserType {
  STUDENT
  TEACHER
  ADMIN
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum QuestionType {
  MATCHING
  TEXT_ANALYSIS
  MAP_ANALYSIS
  OPEN_ENDED
  CLOSED_ENDED
}

enum ParticipationStatus {
  REGISTERED
  IN_PROGRESS
  COMPLETED
  DISQUALIFIED
}

enum QuestionStatus {
  ACTIVE
  PENDING
  REJECTED
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  slug        String   @unique
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        String[]
  imageUrl    String?
  views       Int      @default(0)

  @@map("blog_posts")
}

model StudentSubjectSelection {
  id        String   @id @default(cuid())
  userId    String
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId])
  @@map("student_subject_selections")
}

model AboutPage {
  id          String   @id @default(cuid())
  title       String
  content     Json     // Dynamic content sections
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("about_pages")
}

model RulesPage {
  id          String   @id @default(cuid())
  title       String
  content     Json     // Dynamic content sections
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("rules_pages")
}

model Appeal {
  id                    String              @id @default(cuid())
  studentOlympiadEventId String
  reason                String
  description           String
  status                AppealStatus        @default(PENDING)
  studentId             String
  subjectId             String
  submittedAt           DateTime            @default(now())
  reviewedAt            DateTime?
  reviewedBy            String?
  reviewNotes           String?
  adminComment          String?
  processedAt           DateTime?
  processedBy           String?
  studentOlympiadEvent  StudentOlympiadEvent @relation(fields: [studentOlympiadEventId], references: [id], onDelete: Cascade)
  student               Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  reviewer              User?               @relation(fields: [reviewedBy], references: [id])

  @@map("appeals")
}

model TestResult {
  id           String   @id @default(cuid())
  studentId    String
  subjectId    String
  score        Int
  totalQuestions Int
  completedAt  DateTime @default(now())
  subject      Subject? @relation(fields: [subjectId], references: [id])
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("test_results")
}

enum AppealStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

model VisitorLog {
  id        String   @id @default(cuid())
  ipAddress String?
  userAgent String?
  page      String?
  referrer  String?
  visitedAt DateTime @default(now())
  sessionId String?

  @@map("visitor_logs")
}

model Class {
  id          String         @id @default(cuid())
  name        String
  description String?
  subject     String
  grade       Int
  teacherId   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  teacher         Teacher        @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  students        ClassStudent[]
  tests           ClassTest[]

  @@map("classes")
}

model ClassStudent {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  joinedAt  DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
  @@map("class_students")
}

model ClassTest {
  id          String              @id @default(cuid())
  title       String
  description String?
  classId     String
  teacherId   String
  subjectId   String
  isActive    Boolean             @default(true)
  startDate   DateTime?
  endDate     DateTime?
  duration    Int?                // Duration in minutes
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  class       Class               @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher     Teacher             @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject     Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questions   ClassTestQuestion[]
  results     ClassTestResult[]

  @@map("class_tests")
}

model ClassTestQuestion {
  id          String        @id @default(cuid())
  testId      String
  questionId  String
  order       Int
  points      Int           @default(1)
  createdAt   DateTime      @default(now())
  test        ClassTest     @relation(fields: [testId], references: [id], onDelete: Cascade)
  question    TestQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([testId, questionId])
  @@map("class_test_questions")
}

model ClassTestResult {
  id              String      @id @default(cuid())
  testId          String
  studentId       String
  score           Int?
  totalPoints     Int?
  completedAt     DateTime?
  status          TestStatus  @default(NOT_STARTED)
  answers         Json?       // Store student answers as JSON
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  test            ClassTest   @relation(fields: [testId], references: [id], onDelete: Cascade)
  student         Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([testId, studentId])
  @@map("class_test_results")
}

model TestQuestion {
  id                String                    @id @default(cuid())
  text              String
  type              TestQuestionType
  options           String[]
  correctAnswer     String?
  answerTemplate    String?                   // Template for open-ended questions (visible only to teachers)
  points            Int                       @default(1)
  subjectId         String
  grade             Int
  createdBy         String
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  image             String[]
  content           String?
  maxPoints         Int?
  rubric            String?
  imageOptions      String[]
  isActive          Boolean                   @default(true)
  classTestQuestions ClassTestQuestion[]
  groupQuestions    TestQuestionGroupQuestion[]
  subject           Subject                   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdByTeacher  Teacher                   @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("test_questions")
}

model TestQuestionGroup {
  id          String                        @id @default(cuid())
  name        String
  description String?
  subjectId   String
  grade       Int
  createdBy   String
  createdAt   DateTime                      @default(now())
  updatedAt   DateTime                      @updatedAt
  isActive    Boolean                       @default(true)
  questions   TestQuestionGroupQuestion[]
  subject     Subject                       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdByTeacher Teacher                   @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("test_question_groups")
}

model TestQuestionGroupQuestion {
  id          String            @id @default(cuid())
  groupId     String
  questionId  String
  order       Int
  points      Int               @default(1)
  createdAt   DateTime          @default(now())
  group       TestQuestionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  question    TestQuestion      @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([groupId, questionId])
  @@map("test_question_group_questions")
}

enum TestQuestionType {
  OPEN_ENDED
  CLOSED_ENDED
}

enum TestStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  GRADED
}

model Recommendation {
  id          String   @id @default(cuid())
  title       String
  content     String
  teacherId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  teacher     Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  responses   RecommendationResponse[]
  adminResponse RecommendationAdminResponse?

  @@map("recommendations")
}

model RecommendationResponse {
  id              String         @id @default(cuid())
  recommendationId String
  studentId       String
  response        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  recommendation  Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  student         Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([recommendationId, studentId])
  @@map("recommendation_responses")
}

model RecommendationAdminResponse {
  id              String         @id @default(cuid())
  recommendationId String        @unique
  adminId         String
  response        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  recommendation  Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  admin           Admin          @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("recommendation_admin_responses")
}

model FAQ {
  id          Int      @id @default(autoincrement())
  question    String
  answer      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(true)

  @@map("faqs")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  eventType   String   @default("olympiad") // olympiad only
  isActive    Boolean  @default(true)
  subjectId   String?
  curriculumId String?
  grades      Int[]    @default([]) // 7-12 grades
  gradeCurriculums Json? // { "7": "curriculumId", "8": "curriculumId", ... }
  rounds      Int      @default(1) // Number of rounds for the event
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdByUser Admin  @relation("CreatedCalendarEvents", fields: [createdBy], references: [id], onDelete: Cascade)
  subject     Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  curriculum  Curriculum? @relation(fields: [curriculumId], references: [id], onDelete: SetNull)

  @@map("calendar_events")
}